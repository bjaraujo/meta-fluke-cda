From b6d2924de5c999b1458589e66952a436a6e6a4bd Mon Sep 17 00:00:00 2001
From: Alex Dorchak <halfdome@fluke.com>
Date: Thu, 22 Sep 2016 13:05:21 -0700
Subject: [PATCH 34/34] keypad back to start

---
 drivers/input/keyboard/fluke_keypad.c | 414 +++++++++++++++++++---------------
 1 file changed, 237 insertions(+), 177 deletions(-)

diff --git a/drivers/input/keyboard/fluke_keypad.c b/drivers/input/keyboard/fluke_keypad.c
index 8a077b0..76845f6 100644
--- a/drivers/input/keyboard/fluke_keypad.c
+++ b/drivers/input/keyboard/fluke_keypad.c
@@ -11,8 +11,7 @@
  *  Written by Dennis Scott <dennis@microtronix.com>
  */
 
-/* #include <linux/config.h> */
-
+// #include <linux/config.h>
 #include <linux/kernel.h>
 #include <linux/ioport.h>
 #include <linux/module.h>
@@ -26,68 +25,76 @@
 #include <linux/wait.h>
 #include <linux/sched.h>
 #include <linux/preempt.h>
-#include <linux/semaphore.h>
-#include <linux/mutex.h>
-#include <linux/platform_device.h>
+// #include <asm/semaphore.h>
 #include <asm/uaccess.h>
-#include <asm/irq.h>
-
+#include <asm/io.h>
+// #include <asm/irq.h>
+#include <linux/of_irq.h>
+#include <linux/of_device.h>
+#include <linux/of_address.h>
 
 #define FLUKE_5X5_KEYPAD_MAJOR 240
-static int fluke_keypad_major = FLUKE_5X5_KEYPAD_MAJOR;
-static int fluke_keypad_minor = 0;
+static int FLUKE_KEYPAD_MAJOR = FLUKE_5X5_KEYPAD_MAJOR;
+static int FLUKE_KEYPAD_MINOR = 0;
 
 #define FLUKE_KEYPAD_BUF_SIZE 128
 
+static struct class  *fluke_keypad_class;
+static struct device *fkpd_device = NULL;
+
+static unsigned int base_address = 0x00;
+
 struct fluke_keypad_data {
-	struct resource *mem;
+    unsigned int mapbase;
 	int irq;
 	int minor;
-	struct cdev cdev;
-
-	int open_count;
-
-	int buffer[FLUKE_KEYPAD_BUF_SIZE];
-	int head;
-	int tail;
-
+    int test;
+	unsigned int open_count;
+	unsigned int buffer[FLUKE_KEYPAD_BUF_SIZE];
+	unsigned int head;
+	unsigned int tail;
 	wait_queue_head_t queue;
-	struct mutex mutex;
+	struct semaphore sem;
+	struct cdev cdev;
 };
 
+static struct fluke_keypad_data kb_data;
+
 static int fluke_keypad_open(struct inode* inode, struct file *filp)
 {
 	struct fluke_keypad_data *drv_data;
+    // printk("fluke_keypad_open entry\n");
 
 	drv_data = container_of(inode->i_cdev, struct fluke_keypad_data, cdev);
 	filp->private_data = drv_data;
 
 	preempt_disable();
-	if (drv_data->open_count != 0) {
-		drv_data->open_count++;
+	if (kb_data.open_count != 0) {
+		kb_data.open_count++;
 		preempt_enable();
 		return 0;
 	}
 
 	/* Initialize buffer, queue and semaphore */
-	drv_data->head = 0;
-	drv_data->tail = 0;
-
-	init_waitqueue_head(&drv_data->queue);
-	mutex_init(&(drv_data->mutex));
+	kb_data.head = 0;
+	kb_data.tail = 0;
+    /*
+	init_waitqueue_head(&kb_data.queue);
+    sema_init(&kb_data.sem, 1);
+    */
 	
-	drv_data->open_count++;
+	kb_data.open_count++;
 	preempt_enable();
-
+    // printk("fluke_keypad_open returning success\n");
 	return 0;
 }
 
 static int fluke_keypad_release(struct inode *inode, struct file *filp)
 {
-	struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
+	// struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
 
 	preempt_disable();
-	drv_data->open_count--;
+	kb_data.open_count--;
 	preempt_enable();
 
 	return 0;
@@ -97,231 +104,284 @@ static ssize_t fluke_keypad_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	size_t total, int_count;
-	struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
+	// struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
 		
-	if(count < 4)
+	if(count < 8)
 	{
-		printk(KERN_WARNING "fluke_keypad%d: read requires at least 4 byte buffer\n",
-				drv_data->minor);
+		printk("fluke_keypad%d: read requires at least 8 byte buffer, got %d\n",
+				kb_data.minor, count);
 		return -EIO;
 	}
+    
+	// printk("fluke_keypad_read: entry\n");
+
 
-	if (mutex_lock_interruptible(&drv_data->mutex))
+	if (down_interruptible(&kb_data.sem)) {
+		// printk("fluke_keypad: down_interruptible\n");
 		return -ERESTARTSYS;
+    }
 
-	while (drv_data->head == drv_data->tail) {
+	while (kb_data.head == kb_data.tail) {
 		DEFINE_WAIT(wait);
-		mutex_unlock(&drv_data->mutex);
-		if (filp->f_flags & O_NONBLOCK)
+		up(&kb_data.sem);
+		if (filp->f_flags & O_NONBLOCK) {
+            // printk("O_NONBLOCK\n");
 			return -EAGAIN;
+        }
 
 		/* In all cases but a pointer wrap, only one process is needed
 		   to clear the buffer, so just wake one at a time with "exclusive" */
-		prepare_to_wait_exclusive(&drv_data->queue, &wait, TASK_INTERRUPTIBLE);
-		if(drv_data->head == drv_data->tail)
+		prepare_to_wait_exclusive(&kb_data.queue, &wait, TASK_INTERRUPTIBLE);
+		if(kb_data.head == kb_data.tail)
 			schedule();
-		finish_wait(&drv_data->queue, &wait);
-		if (signal_pending(current))
+		finish_wait(&kb_data.queue, &wait);
+		if (signal_pending(current)) {
+            // printk("ignal_pending current\n");
 			return -ERESTARTSYS;
+        }
 
-		if (mutex_lock_interruptible(&drv_data->mutex))
+		if (down_interruptible(&kb_data.sem)) {
+            // printk("down_interruptible again\n");
 			return -ERESTARTSYS;
+        }
 	}
 	
 	int_count = count / 4;
-	if( drv_data->head > drv_data->tail ) {
-		total = min(int_count, (size_t)(drv_data->head - drv_data->tail));
+	if( kb_data.head > kb_data.tail ) {
+		total = min(int_count, (size_t)(kb_data.head - kb_data.tail));
 	} else {
 		/* pointers wrapped, copy from tail to the end of the buffer */
-		total = min(int_count, (size_t)(FLUKE_KEYPAD_BUF_SIZE - drv_data->tail));
+		total = min(int_count, (size_t)(FLUKE_KEYPAD_BUF_SIZE - kb_data.tail));
 	}
 	
-	if(copy_to_user(buf, &drv_data->buffer[drv_data->tail], total * 4)) {
-		mutex_unlock(&drv_data->mutex);
+	if(copy_to_user(buf, &kb_data.buffer[kb_data.tail], total * 4)) {
+		up(&kb_data.sem);
+        // printk(KERN_WARNING "COPY TO USER \n");
+        // printk("COPY TO USER \n");
 		return -EFAULT;
 	}
 
-	drv_data->tail += total;
-	if( drv_data->tail >= FLUKE_KEYPAD_BUF_SIZE)
-		drv_data->tail -= FLUKE_KEYPAD_BUF_SIZE;
+	kb_data.tail += total;
+	if( kb_data.tail >= FLUKE_KEYPAD_BUF_SIZE)
+		kb_data.tail -= FLUKE_KEYPAD_BUF_SIZE;
 
-	mutex_unlock(&drv_data->mutex);
+	up(&kb_data.sem);
+	// printk("fluke_keypad_read: read %d bytes\n", total);
 	return total;
 }
 
 static struct file_operations fluke_keypad_fops = {
-	.owner = THIS_MODULE,
-	.open = fluke_keypad_open,
+	.owner   = THIS_MODULE,
+	.open    = fluke_keypad_open,
 	.release = fluke_keypad_release,
-	.read = fluke_keypad_read,
+	.read    = fluke_keypad_read,
 };
 
-static irqreturn_t fluke_keypad_handler(int irq, void *dev_id, struct pt_regs *regs)
+static irq_handler_t fluke_keypad_handler(int irq, void *dev_id, struct pt_regs *regs)
 {
-	struct device *dev = (struct device *)dev_id;
-	struct fluke_keypad_data *drv_data;
-	int keycode;
 
-	if (!dev)
+    // struct device *dev = (struct device *)dev_id;
+    // struct fluke_keypad_data *drv_data = &kb_data;
+    unsigned int keycode = 0x00;
+    unsigned int kpd_reg = 0x00;
+    unsigned char i;
+    unsigned char j;
+    const unsigned char NUM_REGISTERS = 2;
+    const unsigned char NUM_BITS_PER_REGISTER = 32;
+
+
+	if (!dev_id) {
+        // printk("interrupt routine NULL DEVICE YIKES\n");
 		return IRQ_NONE;
+    }
+
+    // printk("fluke keypad interrupt routine\n");
 
-	drv_data = (struct fluke_keypad_data*) dev_get_drvdata(dev);
+    // drv_data = dev_get_drvdata((struct device *)dev_id);
+    // drv_data = dev_get_drvdata(fkpd_device);
+    /*
+    if (!drv_data) {
+        printk("interrupt routine NULL DEVICE DOUBLE YIKES XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n");
+        return IRQ_NONE;
+    }
+    */
+
+    kpd_reg = *((unsigned int*)kb_data.mapbase);
 
 	/* read the keypad code, clears the interrupt */
-	keycode = *(int*)drv_data->mem->start;
+    for (i = 0; i < NUM_REGISTERS; i++) {
+        for (j = 0; j < NUM_BITS_PER_REGISTER; j++) {
+            if (kpd_reg & (0x01 << j)) {
+                keycode = ((j + 1) + (NUM_BITS_PER_REGISTER * i)); 
+                // printk ("fkpad: adding %x to keypad buffer\n", keycode);
+                goto ADD_TO_BUFF;
+            }
+        }
+        kpd_reg = *((int*)(kb_data.mapbase + 4));
+        // printk("interrupt routine kpd_register1 = %d\n", kpd_reg);
+    }
+    // printk ("fkpad: adding 0 to keypad buffer, could not find key\n");
+
+    ADD_TO_BUFF:
+
+    // printk ("fkpad: adding%d to keypad buffer\n", keycode);
 
 	/* add it to the buffer if the device is open */
-	if (drv_data->open_count != 0)
+	if (kb_data.open_count != 0)
 	{
-		/* if the buffer is full we discard the input (ugly to avoid % in irq) */
-		if(!(((drv_data->head + 1) == drv_data->tail) ||
-				((drv_data->head == (FLUKE_KEYPAD_BUF_SIZE-1)) &&
-				 (drv_data->tail == 0)))) {
-			drv_data->buffer[drv_data->head] = keycode;
-			drv_data->head++;
-			if (drv_data->head == FLUKE_KEYPAD_BUF_SIZE)
-				drv_data->head = 0;
+		// if the buffer is full we discard the input (ugly to avoid % in irq)
+		if(!(((kb_data.head + 1) == kb_data.tail) ||
+				((kb_data.head == (FLUKE_KEYPAD_BUF_SIZE-1)) &&
+				 (kb_data.tail == 0)))) {
+			kb_data.buffer[kb_data.head] = keycode;
+			kb_data.head++;
+			if (kb_data.head == FLUKE_KEYPAD_BUF_SIZE)
+				kb_data.head = 0;
 		}
 	}
+	wake_up_interruptible(&(kb_data.queue));
+    return (irq_handler_t) IRQ_HANDLED;
+}
 
-	wake_up_interruptible(&drv_data->queue);
+static struct of_device_id fluke_keypad_of_match[] = {
+    { .compatible = "flk,fkeypad-1.0", },
+    {},
+};
 
-	return IRQ_HANDLED;
-}
+MODULE_DEVICE_TABLE(of, fluke_keypad_of_match);
 
-static int fluke_keypad_probe(struct device *dev)
+static int fluke_keypad_probe(struct platform_device *pdev)
 {
-	struct resource *mem;	/* registers */
-	int irq;		/* interrupt */
+    int result;
+    int devno;
+    int rc = 0;
+    int irq;
+    struct resource res;
+
+	struct fluke_keypad_data *drv_data;  //AJD GOES AWAY
+
+    devno = MKDEV(FLUKE_KEYPAD_MAJOR, 0);
+    fkpd_device = device_create(fluke_keypad_class, NULL, devno, NULL, "fkeypd%d", 0);
+    if (IS_ERR(fkpd_device )) {
+        printk ("fkeypd: can't create fluke_keypad_device %x\n", 0);
+        // release_ports();
+        return PTR_ERR(fkpd_device);
+    }
 
-	struct fluke_keypad_data* drv_data = NULL;
-	struct cdev* cdev = NULL;
-	dev_t dev_num;
-	int ret;
+    kb_data.minor = 0;
 
-	/* Get platform device structure */
-	struct platform_device *pdev = container_of(dev, struct platform_device, dev);
+    rc = of_address_to_resource(pdev->dev.of_node, 0, &res);
+    if (rc) {
+        printk("FLUKE KEYPAD PROBE Can't get address of resource\n");
+    }
+    // printk("FLUKE KEYPAD PROBE Assigning address (FDT) %x to minor %x\n", res.start, 0);
 
-	/* Double check resources for sanity 
-	if (pdev->num_resources != 2) {
-		printk(KERN_CRIT "fluke_keypad%d: wrong number of resources for device, got %d.\n",
-				pdev->id, pdev->num_resources);
-		ret = -ENODEV;
-		goto fail;
-	}
-    */
+    if (!request_mem_region(res.start, (res.end - res.start + 1), "fluke_keypad")) {
+        printk (KERN_INFO "fluke_keypad: can't get memory region %ud for fkeypd%d\n", res.start, 0);
+        // release_ports();
+        return -ENODEV;
+    }
+    kb_data.mapbase = (unsigned long)ioremap_nocache(res.start, (res.end - res.start + 1));
+    base_address = kb_data.mapbase;  //AJD GET RID OF THIS
 
-	/* Get resource information */
-	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	irq = platform_get_irq(pdev, 0);
+    irq = irq_of_parse_and_map(pdev->dev.of_node, 0);
+    // printk("FLUKE KEYPAD PROBE: irq_of_parse_and_map returned irq number %d\n", irq);
 
-	/* Check for null values or error values */
-	if (!mem || irq < 0) {
-		printk(KERN_CRIT "fluke_keypad%d: could not retrieve all resources.\n",
-			       pdev->id);
-		ret = -ENODEV;
-		goto fail;
-	}
+    rc = request_irq(irq, (irq_handler_t)fluke_keypad_handler, IRQF_DISABLED, "fkeypd", fkpd_device);
+    // rc = request_irq(irq, (irq_handler_t)fluke_keypad_handler, 0, "fkeypd", NULL);
+    if (rc) {
+        printk("FLUKE KEYPAD PROBE can't register IRQ\n");
+        return -ENODEV;
+    }
 
-	/* Status information update for user */
-	printk(KERN_INFO "fluke_keypad%d: base: 0x%08ux irq: %d\n",
-			pdev->id, mem->start, irq);
-
-	/* Allocate space for driver data */
-	drv_data = (struct fluke_keypad_data*) kmalloc(sizeof(struct fluke_keypad_data),
-			GFP_KERNEL);
-	cdev = cdev_alloc();
-	if (!drv_data || !cdev) {
-		printk(KERN_CRIT "fluke_keypad%d: unable to allocate memory.\n", pdev->id);
-		ret = -ENOMEM;
-		goto fail;
-	}
 
-	memset(drv_data, 0, sizeof(struct fluke_keypad_data));
-	drv_data->mem = mem;
-	drv_data->irq = irq;
-	drv_data->minor = fluke_keypad_minor;
-	fluke_keypad_minor++;
+    cdev_init(&kb_data.cdev, &fluke_keypad_fops);
 
-	drv_data->open_count = 0;
+    sema_init(&kb_data.sem, 1);
 
-	dev_set_drvdata(dev, drv_data);
+    kb_data.cdev.owner = THIS_MODULE;
+    kb_data.cdev.ops   = &fluke_keypad_fops;
+    kb_data.test = 0x13;
 
-	/* register the interrupt */
-	ret = request_irq(irq, fluke_keypad_handler, 0, pdev->name, dev);
-	if (ret) {
-		printk(KERN_CRIT "fluke_keypad%d: unable to get interrupt %d\n",
-				pdev->id, irq);
-		goto fail;
-	} else {
-		enable_irq(drv_data->irq);
-	}
-	
-	/* Allocate device number */
-	dev_num = MKDEV(fluke_keypad_major, drv_data->minor);
-	ret = register_chrdev_region(dev_num, 1, pdev->name);
-	if (ret)
-	{
-		printk(KERN_CRIT "fluke_keypad%d: unable to get device number %d %d\n",
-				pdev->id, fluke_keypad_major, drv_data->minor);
-		goto failnum;
-	}
+    result = cdev_add(&kb_data.cdev, devno, 1);
 
-	/* Register character driver */
-	cdev_init(&drv_data->cdev, &fluke_keypad_fops);
-	drv_data->cdev.owner = THIS_MODULE;
-	drv_data->cdev.ops = &fluke_keypad_fops;
-	ret = cdev_add(&drv_data->cdev, dev_num, 1);
-	if (ret)
-	{
-		printk(KERN_CRIT "fluke_keypad%d: unable to register device\n", pdev->id);
-		goto faildev;
-	}
-	
-	return 0;
+    dev_set_drvdata(fkpd_device, ((void *)&kb_data));
 
-faildev:
-	unregister_chrdev_region(dev_num, 1);
-failnum:
-	free_irq(drv_data->irq, dev);
-fail:
-	printk(KERN_CRIT "fluke_keypad%d: probe failed.\n", pdev->id);
+	drv_data = dev_get_drvdata(fkpd_device);  //AJD goes away
 
-	if(drv_data) kfree(drv_data);
+    // printk("\n\n FLUKE KEYPAD PROBE test = %d\n\n", drv_data->test); 
+    
+	init_waitqueue_head(&kb_data.queue);
+    sema_init(&kb_data.sem, 1);
 
-	return ret;
+    if(result)
+        printk (KERN_INFO "fluke_keypad: Error %d adding fkeypd%d\n", result, 0);
+    else
+        printk (KERN_INFO "fluke_keypad: Registering fkeypd0 on Major %d, Minor %d\n", FLUKE_KEYPAD_MAJOR, 0);
+    return result;
 }
 
-static const struct of_device_id fluke_keypad_of_match[] = {
-    { .compatible = "flk,fkeypad-1.0"},
-    { {0} }
-};
-MODULE_DEVICE_TABLE(of, fluke_gpib_of_match);
+static int fluke_keypad_remove(struct device *dev)
+{
+	struct fluke_keypad_data *drv_data = dev_get_drvdata(dev);
+	dev_t dev_num;
+
+	if(drv_data) {
+		cdev_del(&drv_data->cdev);
+		dev_num = MKDEV(FLUKE_KEYPAD_MAJOR, drv_data->minor);
+		unregister_chrdev_region(dev_num, 1);
+		free_irq(drv_data->irq, dev);
+		kfree(drv_data);
+	}
+	
+	return 0;
+}
 
-static struct platform_driver fluke_keypad_driver = {
+
+static struct platform_driver fkeypd_platform_driver = {
+    .probe =  fluke_keypad_probe,
+    .remove = fluke_keypad_remove,
     .driver = {
-	    .name = "fluke_keypad",
-        .owner = THIS_MODULE,
-        .of_match_table = fluke_keypad_of_match,
-    },
-	.probe = &fluke_keypad_probe,
+                  .name = "fluke_keypad",
+                  .owner = THIS_MODULE,
+                  .of_match_table = fluke_keypad_of_match,
+              },
 };
 
-static int fluke_keypad_init(void)
-{
+static int __init fluke_keypad_init (void) {
     int result;
-	result = platform_driver_register(&fluke_keypad_driver);
+    dev_t dev;
+
+    fluke_keypad_class = class_create(THIS_MODULE, "fluke-keypad");    // Create the sys/class entry
+    if (IS_ERR(fluke_keypad_class)) {
+        printk ("fkeypd: can't create fluke_keypad_class.\n");
+        return PTR_ERR(fluke_keypad_class);
+    }
+    printk (KERN_INFO "fluke_keypad: registered fluke_keypad_class.\n");
+
+    /* First, let's get the devices we need /dev/fkeypd0 - /dev/fkeypd */
+    dev = MKDEV(FLUKE_KEYPAD_MAJOR, 0);
+    result = register_chrdev_region(dev, 1, "fkeypd");
+    if (result < 0) {
+        printk (KERN_INFO "fkeypd: can't register keypad /dev/fkeypd0\n");
+        // release_ports();
+        return result;
+    }
+
+    result = platform_driver_register(&fkeypd_platform_driver);
     if (result) {
-        printk("fluke_gpib: platform_driver_register failed!\n");
+        printk (KERN_INFO "fkeypd: platform_register failed!\n");
+        // release_ports();
         return result;
     }
-    printk("fluke_keypad\n");
+
     return 0;
 }
 
 static void fluke_keypad_exit(void)
 {
-	platform_driver_unregister(&fluke_keypad_driver);
+    // release_ports();
+	return driver_unregister(&fkeypd_platform_driver);
 }
 
 module_init(fluke_keypad_init);
-- 
1.8.4.5

