From 957f501b3c1cdf6571e60373b301557d7a08df7b Mon Sep 17 00:00:00 2001
From: "Alex J. Dorchak" <halfdome@fluke.com>
Date: Wed, 13 Jul 2016 13:05:55 -0700
Subject: [PATCH] Updated the fluke keypad driver.

---
 drivers/input/keyboard/Kconfig        |   9 +
 drivers/input/keyboard/Makefile       |   1 +
 drivers/input/keyboard/fluke_keypad.c | 328 ++++++++++++++++++++++++++++++++++
 3 files changed, 338 insertions(+)
 create mode 100644 drivers/input/keyboard/fluke_keypad.c

diff --git a/drivers/input/keyboard/Kconfig b/drivers/input/keyboard/Kconfig
index 106fbac..413439c 100644
--- a/drivers/input/keyboard/Kconfig
+++ b/drivers/input/keyboard/Kconfig
@@ -185,6 +185,15 @@ config KEYBOARD_EP93XX
 	  To compile this driver as a module, choose M here: the
 	  module will be called ep93xx_keypad.
 
+config KEYBOARD_FLUKE_MATRIX
+        tristate "Fluke Matrix Keypad support"
+        select INPUT_FLUKEMATRIXKBD
+        help
+          Say Y here to enable support for the Fluke matrix keypad.
+
+          To compile this driver as a module, choose M here: the
+          module will be called fluke_keypad.
+
 config KEYBOARD_GPIO
 	tristate "GPIO Buttons"
 	depends on GPIOLIB
diff --git a/drivers/input/keyboard/Makefile b/drivers/input/keyboard/Makefile
index df28d55..6d1ed36 100644
--- a/drivers/input/keyboard/Makefile
+++ b/drivers/input/keyboard/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_KEYBOARD_CROS_EC)		+= cros_ec_keyb.o
 obj-$(CONFIG_KEYBOARD_DAVINCI)		+= davinci_keyscan.o
 obj-$(CONFIG_KEYBOARD_EP93XX)		+= ep93xx_keypad.o
 obj-$(CONFIG_KEYBOARD_GOLDFISH_EVENTS)	+= goldfish_events.o
+obj-$(CONFIG_KEYBOARD_FLUKE_MATRIX)	+= fluke_keypad.o
 obj-$(CONFIG_KEYBOARD_GPIO)		+= gpio_keys.o
 obj-$(CONFIG_KEYBOARD_GPIO_POLLED)	+= gpio_keys_polled.o
 obj-$(CONFIG_KEYBOARD_TCA6416)		+= tca6416-keypad.o
diff --git a/drivers/input/keyboard/fluke_keypad.c b/drivers/input/keyboard/fluke_keypad.c
new file mode 100644
index 0000000..2f50001
--- /dev/null
+++ b/drivers/input/keyboard/fluke_keypad.c
@@ -0,0 +1,328 @@
+/*
+ *  linux/drivers/char/fluke_keypad.c
+ *  
+ *  Copyright (C) 2004 Microtronix Datacom Ltd
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  as published by the Free Software Foundation; either version
+ *  2 of the License, or (at your option) any later version.
+ * 
+ *  Written by Dennis Scott <dennis@microtronix.com>
+ */
+
+/* #include <linux/config.h> */
+
+#include <linux/kernel.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/preempt.h>
+#include <linux/semaphore.h>
+#include <linux/mutex.h>
+#include <linux/platform_device.h>
+#include <asm/uaccess.h>
+#include <asm/irq.h>
+
+
+#define FLUKE_5X5_KEYPAD_MAJOR 240
+static int fluke_keypad_major = FLUKE_5X5_KEYPAD_MAJOR;
+static int fluke_keypad_minor = 0;
+
+#define FLUKE_KEYPAD_BUF_SIZE 128
+
+struct fluke_keypad_data {
+	struct resource *mem;
+	int irq;
+	int minor;
+	struct cdev cdev;
+
+	int open_count;
+
+	int buffer[FLUKE_KEYPAD_BUF_SIZE];
+	int head;
+	int tail;
+
+	wait_queue_head_t queue;
+	struct mutex mutex;
+};
+
+static int fluke_keypad_open(struct inode* inode, struct file *filp)
+{
+	struct fluke_keypad_data *drv_data;
+
+	drv_data = container_of(inode->i_cdev, struct fluke_keypad_data, cdev);
+	filp->private_data = drv_data;
+
+	preempt_disable();
+	if (drv_data->open_count != 0) {
+		drv_data->open_count++;
+		preempt_enable();
+		return 0;
+	}
+
+	/* Initialize buffer, queue and semaphore */
+	drv_data->head = 0;
+	drv_data->tail = 0;
+
+	init_waitqueue_head(&drv_data->queue);
+	mutex_init(&(drv_data->mutex));
+	
+	drv_data->open_count++;
+	preempt_enable();
+
+	return 0;
+}
+
+static int fluke_keypad_release(struct inode *inode, struct file *filp)
+{
+	struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
+
+	preempt_disable();
+	drv_data->open_count--;
+	preempt_enable();
+
+	return 0;
+}
+
+static ssize_t fluke_keypad_read(struct file *filp, char __user *buf,
+		size_t count, loff_t *f_pos)
+{
+	size_t total, int_count;
+	struct fluke_keypad_data *drv_data = (struct fluke_keypad_data*)filp->private_data;
+		
+	if(count < 4)
+	{
+		printk(KERN_WARNING "fluke_keypad%d: read requires at least 4 byte buffer\n",
+				drv_data->minor);
+		return -EIO;
+	}
+
+	if (mutex_lock_interruptible(&drv_data->mutex))
+		return -ERESTARTSYS;
+
+	while (drv_data->head == drv_data->tail) {
+		DEFINE_WAIT(wait);
+		mutex_unlock(&drv_data->mutex);
+		if (filp->f_flags & O_NONBLOCK)
+			return -EAGAIN;
+
+		/* In all cases but a pointer wrap, only one process is needed
+		   to clear the buffer, so just wake one at a time with "exclusive" */
+		prepare_to_wait_exclusive(&drv_data->queue, &wait, TASK_INTERRUPTIBLE);
+		if(drv_data->head == drv_data->tail)
+			schedule();
+		finish_wait(&drv_data->queue, &wait);
+		if (signal_pending(current))
+			return -ERESTARTSYS;
+
+		if (mutex_lock_interruptible(&drv_data->mutex))
+			return -ERESTARTSYS;
+	}
+	
+	int_count = count / 4;
+	if( drv_data->head > drv_data->tail ) {
+		total = min(int_count, (size_t)(drv_data->head - drv_data->tail));
+	} else {
+		/* pointers wrapped, copy from tail to the end of the buffer */
+		total = min(int_count, (size_t)(FLUKE_KEYPAD_BUF_SIZE - drv_data->tail));
+	}
+	
+	if(copy_to_user(buf, &drv_data->buffer[drv_data->tail], total * 4)) {
+		mutex_unlock(&drv_data->mutex);
+		return -EFAULT;
+	}
+
+	drv_data->tail += total;
+	if( drv_data->tail >= FLUKE_KEYPAD_BUF_SIZE)
+		drv_data->tail -= FLUKE_KEYPAD_BUF_SIZE;
+
+	mutex_unlock(&drv_data->mutex);
+	return total;
+}
+
+static struct file_operations fluke_keypad_fops = {
+	.owner = THIS_MODULE,
+	.open = fluke_keypad_open,
+	.release = fluke_keypad_release,
+	.read = fluke_keypad_read,
+};
+
+static irqreturn_t fluke_keypad_handler(int irq, void *dev_id, struct pt_regs *regs)
+{
+	struct device *dev = (struct device *)dev_id;
+	struct fluke_keypad_data *drv_data;
+	int keycode;
+
+	if (!dev)
+		return IRQ_NONE;
+
+	drv_data = (struct fluke_keypad_data*) dev_get_drvdata(dev);
+
+	/* read the keypad code, clears the interrupt */
+	keycode = *(int*)drv_data->mem->start;
+
+	/* add it to the buffer if the device is open */
+	if (drv_data->open_count != 0)
+	{
+		/* if the buffer is full we discard the input (ugly to avoid % in irq) */
+		if(!(((drv_data->head + 1) == drv_data->tail) ||
+				((drv_data->head == (FLUKE_KEYPAD_BUF_SIZE-1)) &&
+				 (drv_data->tail == 0)))) {
+			drv_data->buffer[drv_data->head] = keycode;
+			drv_data->head++;
+			if (drv_data->head == FLUKE_KEYPAD_BUF_SIZE)
+				drv_data->head = 0;
+		}
+	}
+
+	wake_up_interruptible(&drv_data->queue);
+
+	return IRQ_HANDLED;
+}
+
+static int fluke_keypad_probe(struct device *dev)
+{
+	struct resource *mem;	/* registers */
+	int irq;		/* interrupt */
+
+	struct fluke_keypad_data* drv_data = NULL;
+	struct cdev* cdev = NULL;
+	dev_t dev_num;
+	int ret;
+
+	/* Get platform device structure */
+	struct platform_device *pdev = container_of(dev, struct platform_device, dev);
+
+	/* Double check resources for sanity */
+	if (pdev->num_resources != 2) {
+		printk(KERN_CRIT "fluke_keypad%d: wrong number of resources for device.\n",
+				pdev->id);
+		ret = -ENODEV;
+		goto fail;
+	}
+
+	/* Get resource information */
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	irq = platform_get_irq(pdev, 0);
+
+	/* Check for null values or error values */
+	if (!mem || irq < 0) {
+		printk(KERN_CRIT "fluke_keypad%d: could not retrieve all resources.\n",
+			       pdev->id);
+		ret = -ENODEV;
+		goto fail;
+	}
+
+	/* Status information update for user */
+	printk(KERN_INFO "fluke_keypad%d: base: 0x%08ux irq: %d\n",
+			pdev->id, mem->start, irq);
+
+	/* Allocate space for driver data */
+	drv_data = (struct fluke_keypad_data*) kmalloc(sizeof(struct fluke_keypad_data),
+			GFP_KERNEL);
+	cdev = cdev_alloc();
+	if (!drv_data || !cdev) {
+		printk(KERN_CRIT "fluke_keypad%d: unable to allocate memory.\n", pdev->id);
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	memset(drv_data, 0, sizeof(struct fluke_keypad_data));
+	drv_data->mem = mem;
+	drv_data->irq = irq;
+	drv_data->minor = fluke_keypad_minor;
+	fluke_keypad_minor++;
+
+	drv_data->open_count = 0;
+
+	dev_set_drvdata(dev, drv_data);
+
+	/* register the interrupt */
+	ret = request_irq(irq, fluke_keypad_handler, 0, pdev->name, dev);
+	if (ret) {
+		printk(KERN_CRIT "fluke_keypad%d: unable to get interrupt %d\n",
+				pdev->id, irq);
+		goto fail;
+	} else {
+		enable_irq(drv_data->irq);
+	}
+	
+	/* Allocate device number */
+	dev_num = MKDEV(fluke_keypad_major, drv_data->minor);
+	ret = register_chrdev_region(dev_num, 1, pdev->name);
+	if (ret)
+	{
+		printk(KERN_CRIT "fluke_keypad%d: unable to get device number %d %d\n",
+				pdev->id, fluke_keypad_major, drv_data->minor);
+		goto failnum;
+	}
+
+	/* Register character driver */
+	cdev_init(&drv_data->cdev, &fluke_keypad_fops);
+	drv_data->cdev.owner = THIS_MODULE;
+	drv_data->cdev.ops = &fluke_keypad_fops;
+	ret = cdev_add(&drv_data->cdev, dev_num, 1);
+	if (ret)
+	{
+		printk(KERN_CRIT "fluke_keypad%d: unable to register device\n", pdev->id);
+		goto faildev;
+	}
+	
+	return 0;
+
+faildev:
+	unregister_chrdev_region(dev_num, 1);
+failnum:
+	free_irq(drv_data->irq, dev);
+fail:
+	printk(KERN_CRIT "fluke_keypad%d: probe failed.\n", pdev->id);
+
+	if(drv_data) kfree(drv_data);
+
+	return ret;
+}
+
+static int fluke_keypad_remove(struct device *dev)
+{
+	struct fluke_keypad_data *drv_data = dev_get_drvdata(dev);
+	dev_t dev_num;
+
+	if(drv_data) {
+		cdev_del(&drv_data->cdev);
+		dev_num = MKDEV(fluke_keypad_major, drv_data->minor);
+		unregister_chrdev_region(dev_num, 1);
+		free_irq(drv_data->irq, dev);
+		kfree(drv_data);
+	}
+	
+	return 0;
+}
+
+static struct device_driver fluke_keypad_driver = {
+	.name = "fluke_keypad",
+	.bus = &platform_bus_type,
+	.probe = fluke_keypad_probe,
+	.remove = fluke_keypad_remove,
+};
+
+static int fluke_keypad_init(void)
+{
+	return driver_register(&fluke_keypad_driver);
+}
+
+static void fluke_keypad_exit(void)
+{
+	return driver_unregister(&fluke_keypad_driver);
+}
+
+module_init(fluke_keypad_init);
+module_exit(fluke_keypad_exit);
-- 
1.8.4.5

